{"version":3,"sources":["webpack:///E:/projects/Angular/Cars-store/CheckCars24-Storefront/node_modules/ngx-captcha/__ivy_ngcc__/fesm2015/ngx-captcha.js"],"names":["_c0","BaseReCaptchaComponent","renderer","zone","injector","scriptService","this","captchaElemPrefix","setupCaptcha","useGlobalDomain","type","tabIndex","success","load","reset","ready","error","expire","setupAfterLoad","resetCaptchaAfterSuccess","isLoaded","control","get","setupComponent","changes","hl","firstChange","currentValue","previousValue","cleanup","reCaptchaApi","getResponse","captchaId","run","onChange","onTouched","next","currentResponse","captchaElemId","captchaElem","document","getElementById","Error","runOutsideAngular","render","getCaptchaProperties","callback","resetCaptcha","Date","getUTCMilliseconds","Math","floor","random","captchaSpecificSetup","createAndSetCaptchaElem","registerCaptchaScript","grecaptcha","onloadCallback","grecapcha","renderReCaptcha","getPseudoUniqueNumber","generateNewElemId","captchaWrapperElem","nativeElement","innerHTML","newElem","createElement","id","appendChild","ensureCaptchaElem","obj","fn","ɵfac","t","ɵdir","inputs","siteKey","outputs","features","ReCaptchaType","InvisibleReCaptcha","ReCaptcha2","ScriptService","windowGrecaptcha","windowOnLoadCallbackProperty","globalDomain","defaultDomain","onLoad","language","grecaptchaScriptLoaded","window","bind","scriptElem","src","getCaptchaScriptUrl","async","defer","getElementsByTagName","getLanguageParam","ɵprov","token","factory","ReCaptcha2Component","super","windowOnErrorCallbackProperty","windowOnExpireCallbackProperty","theme","size","recaptchaType","registerCallbacks","response","handleCallback","handleExpireCallback","handleErrorCallback","ɵcmp","selectors","viewQuery","rf","ctx","_t","first","provide","useExisting","multi","decls","vars","consts","template","encapsulation","ReCaptchaV3Service","action","config","executeAsPromise","then","Promise","resolve","reject","execute","NgxCaptchaModule","ɵmod","ɵinj","providers","imports"],"mappings":"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","file":"x","sourcesContent":["import { EventEmitter, Input, Output, Injectable, NgZone, Component, forwardRef, Renderer2, Injector, ViewChild, NgModule } from '@angular/core';\nimport { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/base-recaptcha.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @abstract\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\n\nconst _c0 = [\"captchaWrapperElem\"];\nclass BaseReCaptchaComponent {\r\n    /**\r\n     * @protected\r\n     * @param {?} renderer\r\n     * @param {?} zone\r\n     * @param {?} injector\r\n     * @param {?} scriptService\r\n     */\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * Prefix of the captcha element\r\n         */\r\n        this.captchaElemPrefix = 'ngx_captcha_id_';\r\n        this.setupCaptcha = true;\r\n        /**\r\n         * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n         */\r\n        this.useGlobalDomain = false;\r\n        /**\r\n         * Type\r\n         */\r\n        this.type = 'image';\r\n        /**\r\n         * Tab index\r\n         */\r\n        this.tabIndex = 0;\r\n        /**\r\n         * Called when captcha receives successful response.\r\n         * Captcha response token is passed to event.\r\n         */\r\n        this.success = new EventEmitter();\r\n        /**\r\n         * Called when captcha is loaded. Event receives id of the captcha\r\n         */\r\n        this.load = new EventEmitter();\r\n        /**\r\n         * Called when captcha is reset.\r\n         */\r\n        this.reset = new EventEmitter();\r\n        /**\r\n         * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n         */\r\n        this.ready = new EventEmitter();\r\n        /**\r\n         * Error callback\r\n         */\r\n        this.error = new EventEmitter();\r\n        /**\r\n         * Expired callback\r\n         */\r\n        this.expire = new EventEmitter();\r\n        /**\r\n         * Indicates if captcha should be set on load\r\n         */\r\n        this.setupAfterLoad = false;\r\n        /**\r\n         * If enabled, captcha will reset after receiving success response. This is useful\r\n         * when invisible captcha need to be resolved multiple times on same page\r\n         */\r\n        this.resetCaptchaAfterSuccess = false;\r\n        /**\r\n         * Indicates if captcha is loaded\r\n         */\r\n        this.isLoaded = false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewInit() {\r\n        this.control = this.injector.get(NgControl).control;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewChecked() {\r\n        if (this.setupCaptcha) {\r\n            this.setupCaptcha = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        // cleanup scripts if language changed because they need to be reloaded\r\n        if (changes && changes.hl) {\r\n            // cleanup scripts when language changes\r\n            if (!changes.hl.firstChange && (changes.hl.currentValue !== changes.hl.previousValue)) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n        if (changes && changes.useGlobalDomain) {\r\n            // cleanup scripts when domain changes\r\n            if (!changes.useGlobalDomain.firstChange && (changes.useGlobalDomain.currentValue !== changes.useGlobalDomain.previousValue)) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n        this.setupCaptcha = true;\r\n    }\r\n    /**\r\n     * Gets captcha response as per reCaptcha docs\r\n     * @return {?}\r\n     */\r\n    getResponse() {\r\n        return this.reCaptchaApi.getResponse(this.captchaId);\r\n    }\r\n    /**\r\n     * Gets Id of captcha widget\r\n     * @return {?}\r\n     */\r\n    getCaptchaId() {\r\n        return this.captchaId;\r\n    }\r\n    /**\r\n     * Resets captcha\r\n     * @return {?}\r\n     */\r\n    resetCaptcha() {\r\n        this.zone.run((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            // reset captcha using Google js api\r\n            this.reCaptchaApi.reset();\r\n            // required due to forms\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n            // trigger reset event\r\n            this.reset.next();\r\n        }));\r\n    }\r\n    /**\r\n     * Gets last submitted captcha response\r\n     * @return {?}\r\n     */\r\n    getCurrentResponse() {\r\n        return this.currentResponse;\r\n    }\r\n    /**\r\n     * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n     * @return {?}\r\n     */\r\n    reloadCaptcha() {\r\n        this.setupComponent();\r\n    }\r\n    /**\r\n     * @protected\r\n     * @param {?} captchaElemId\r\n     * @return {?}\r\n     */\r\n    ensureCaptchaElem(captchaElemId) {\r\n        /** @type {?} */\r\n        const captchaElem = document.getElementById(captchaElemId);\r\n        if (!captchaElem) {\r\n            throw Error(`Captcha element with id '${captchaElemId}' was not found`);\r\n        }\r\n        // assign captcha alem\r\n        this.captchaElem = captchaElem;\r\n    }\r\n    /**\r\n     * Responsible for instantiating captcha element\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    renderReCaptcha() {\r\n        // run outside angular zone due to timeout issues when testing\r\n        // details: https://github.com/Enngage/ngx-captcha/issues/26\r\n        this.zone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\r\n            this.ready.next();\r\n        }));\r\n    }\r\n    /**\r\n     * Called when captcha receives response\r\n     * @protected\r\n     * @param {?} callback Callback\r\n     * @return {?}\r\n     */\r\n    handleCallback(callback) {\r\n        this.currentResponse = callback;\r\n        this.success.next(callback);\r\n        this.zone.run((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.onChange(callback);\r\n            this.onTouched(callback);\r\n        }));\r\n        if (this.resetCaptchaAfterSuccess) {\r\n            this.resetCaptcha();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    getPseudoUniqueNumber() {\r\n        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    setupComponent() {\r\n        // captcha specific setup\r\n        this.captchaSpecificSetup();\r\n        // create captcha wrapper\r\n        this.createAndSetCaptchaElem();\r\n        this.scriptService.registerCaptchaScript(this.useGlobalDomain, 'explicit', (/**\r\n         * @param {?} grecaptcha\r\n         * @return {?}\r\n         */\r\n        (grecaptcha) => {\r\n            this.onloadCallback(grecaptcha);\r\n        }), this.hl);\r\n    }\r\n    /**\r\n     * Called when google's recaptcha script is ready\r\n     * @private\r\n     * @param {?} grecapcha\r\n     * @return {?}\r\n     */\r\n    onloadCallback(grecapcha) {\r\n        // assign reference to reCaptcha Api once its loaded\r\n        this.reCaptchaApi = grecapcha;\r\n        if (!this.reCaptchaApi) {\r\n            throw Error(`ReCaptcha Api was not initialized correctly`);\r\n        }\r\n        // loaded flag\r\n        this.isLoaded = true;\r\n        // fire load event\r\n        this.load.next();\r\n        // render captcha\r\n        this.renderReCaptcha();\r\n        // setup component if it was flagged as such\r\n        if (this.setupAfterLoad) {\r\n            this.setupAfterLoad = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    generateNewElemId() {\r\n        return this.captchaElemPrefix + this.getPseudoUniqueNumber();\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    createAndSetCaptchaElem() {\r\n        // generate new captcha id\r\n        this.captchaElemId = this.generateNewElemId();\r\n        if (!this.captchaElemId) {\r\n            throw Error(`Captcha elem Id is not set`);\r\n        }\r\n        if (!this.captchaWrapperElem) {\r\n            throw Error(`Captcha DOM element is not initialized`);\r\n        }\r\n        // remove old html\r\n        this.captchaWrapperElem.nativeElement.innerHTML = '';\r\n        // create new wrapper for captcha\r\n        /** @type {?} */\r\n        const newElem = this.renderer.createElement('div');\r\n        newElem.id = this.captchaElemId;\r\n        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\r\n        // update captcha elem\r\n        this.ensureCaptchaElem(this.captchaElemId);\r\n    }\r\n    /**\r\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    writeValue(obj) { }\r\n    /**\r\n     * This method helps us tie together recaptcha and our formControl values\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) {\r\n        this.onChange = fn;\r\n    }\r\n    /**\r\n     * At some point we might be interested whether the user has touched our component\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) {\r\n        this.onTouched = fn;\r\n    }\r\n    /**\r\n     * Handles error callback\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    handleErrorCallback() {\r\n        this.zone.run((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n        }));\r\n        this.error.next();\r\n    }\r\n    /**\r\n     * Handles expired callback\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    handleExpireCallback() {\r\n        this.expire.next();\r\n        // reset captcha on expire callback\r\n        this.resetCaptcha();\r\n    }\r\n}\nBaseReCaptchaComponent.ɵfac = function BaseReCaptchaComponent_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };\nBaseReCaptchaComponent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: BaseReCaptchaComponent, inputs: { useGlobalDomain: \"useGlobalDomain\", type: \"type\", tabIndex: \"tabIndex\", siteKey: \"siteKey\", hl: \"hl\" }, outputs: { success: \"success\", load: \"load\", reset: \"reset\", ready: \"ready\", error: \"error\", expire: \"expire\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\r\nBaseReCaptchaComponent.propDecorators = {\r\n    siteKey: [{ type: Input }],\r\n    useGlobalDomain: [{ type: Input }],\r\n    type: [{ type: Input }],\r\n    hl: [{ type: Input }],\r\n    tabIndex: [{ type: Input }],\r\n    success: [{ type: Output }],\r\n    load: [{ type: Output }],\r\n    reset: [{ type: Output }],\r\n    ready: [{ type: Output }],\r\n    error: [{ type: Output }],\r\n    expire: [{ type: Output }]\r\n};\n\r\nif (false) {\r\n    /**\r\n     * Prefix of the captcha element\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.captchaElemPrefix;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    BaseReCaptchaComponent.prototype.setupCaptcha;\r\n    /**\r\n     * Google's site key.\r\n     * You can find this under https://www.google.com/recaptcha\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.siteKey;\r\n    /**\r\n     * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.useGlobalDomain;\r\n    /**\r\n     * Type\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.type;\r\n    /**\r\n     * Language code. Auto-detects the user's language if unspecified.\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.hl;\r\n    /**\r\n     * Tab index\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.tabIndex;\r\n    /**\r\n     * Called when captcha receives successful response.\r\n     * Captcha response token is passed to event.\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.success;\r\n    /**\r\n     * Called when captcha is loaded. Event receives id of the captcha\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.load;\r\n    /**\r\n     * Called when captcha is reset.\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.reset;\r\n    /**\r\n     * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.ready;\r\n    /**\r\n     * Error callback\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.error;\r\n    /**\r\n     * Expired callback\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.expire;\r\n    /** @type {?} */\r\n    BaseReCaptchaComponent.prototype.captchaWrapperElem;\r\n    /**\r\n     * Indicates if captcha should be set on load\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    BaseReCaptchaComponent.prototype.setupAfterLoad;\r\n    /**\r\n     * Captcha element\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.captchaElem;\r\n    /**\r\n     * Id of the captcha elem\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.captchaId;\r\n    /**\r\n     * Holds last response value\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.currentResponse;\r\n    /**\r\n     * If enabled, captcha will reset after receiving success response. This is useful\r\n     * when invisible captcha need to be resolved multiple times on same page\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.resetCaptchaAfterSuccess;\r\n    /**\r\n     * Captcha type\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.recaptchaType;\r\n    /**\r\n     * Required by ControlValueAccessor\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.onChange;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.onTouched;\r\n    /**\r\n     * Indicates if captcha is loaded\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.isLoaded;\r\n    /**\r\n     * Reference to global reCaptcha API\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.reCaptchaApi;\r\n    /**\r\n     * Id of the DOM element wrapping captcha\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.captchaElemId;\r\n    /**\r\n     * Form Control to be enable usage in reactive forms\r\n     * @type {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.control;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.renderer;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.zone;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.injector;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    BaseReCaptchaComponent.prototype.scriptService;\r\n    /**\r\n     * Gets reCaptcha properties\r\n     * @abstract\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.getCaptchaProperties = function () { };\r\n    /**\r\n     * Used for captcha specific setup\r\n     * @abstract\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    BaseReCaptchaComponent.prototype.captchaSpecificSetup = function () { };\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/models/recaptcha-type.enum.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @enum {number} */\r\nconst ReCaptchaType = {\r\n    InvisibleReCaptcha: 0,\r\n    ReCaptcha2: 1,\r\n};\r\nReCaptchaType[ReCaptchaType.InvisibleReCaptcha] = 'InvisibleReCaptcha';\r\nReCaptchaType[ReCaptchaType.ReCaptcha2] = 'ReCaptcha2';\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/services/script.service.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass ScriptService {\r\n    /**\r\n     * @param {?} zone\r\n     */\r\n    constructor(zone) {\r\n        this.zone = zone;\r\n        /**\r\n         * Name of the global google recaptcha script\r\n         */\r\n        this.windowGrecaptcha = 'grecaptcha';\r\n        /**\r\n         * Name of the global callback\r\n         */\r\n        this.windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';\r\n        this.globalDomain = 'recaptcha.net';\r\n        this.defaultDomain = 'google.com';\r\n    }\r\n    /**\r\n     * @param {?} useGlobalDomain\r\n     * @param {?} render\r\n     * @param {?} onLoad\r\n     * @param {?=} language\r\n     * @return {?}\r\n     */\r\n    registerCaptchaScript(useGlobalDomain, render, onLoad, language) {\r\n        if (this.grecaptchaScriptLoaded()) {\r\n            // recaptcha script is already loaded\r\n            // just call the callback\r\n            this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                onLoad(window[this.windowGrecaptcha]);\r\n            }));\r\n            return;\r\n        }\r\n        // we need to patch the callback through global variable, otherwise callback is not accessible\r\n        // note: https://github.com/Enngage/ngx-captcha/issues/2\r\n        window[this.windowOnLoadCallbackProperty] = (/** @type {?} */ (((/**\r\n         * @return {?}\r\n         */\r\n        () => this.zone.run(onLoad.bind(this, window[this.windowGrecaptcha]))))));\r\n        // prepare script elem\r\n        /** @type {?} */\r\n        const scriptElem = document.createElement('script');\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.src = this.getCaptchaScriptUrl(useGlobalDomain, render, language);\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    cleanup() {\r\n        window[this.windowOnLoadCallbackProperty] = undefined;\r\n        window[this.windowGrecaptcha] = undefined;\r\n    }\r\n    /**\r\n     * Indicates if google recaptcha script is available and ready to be used\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    grecaptchaScriptLoaded() {\r\n        if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Gets language param used in script url\r\n     * @private\r\n     * @param {?=} hl\r\n     * @return {?}\r\n     */\r\n    getLanguageParam(hl) {\r\n        if (!hl) {\r\n            return '';\r\n        }\r\n        return `&hl=${hl}`;\r\n    }\r\n    /**\r\n     * Url to google api script\r\n     * @private\r\n     * @param {?} useGlobalDomain\r\n     * @param {?} render\r\n     * @param {?=} language\r\n     * @return {?}\r\n     */\r\n    getCaptchaScriptUrl(useGlobalDomain, render, language) {\r\n        /** @type {?} */\r\n        const domain = useGlobalDomain ? this.globalDomain : this.defaultDomain;\r\n        // tslint:disable-next-line:max-line-length\r\n        return `https://www.${domain}/recaptcha/api.js?onload=${this.windowOnLoadCallbackProperty}&render=${render}${this.getLanguageParam(language)}`;\r\n    }\r\n}\nScriptService.ɵfac = function ScriptService_Factory(t) { return new (t || ScriptService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nScriptService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ScriptService, factory: ScriptService.ɵfac });\r\n/** @nocollapse */\r\nScriptService.ctorParameters = () => [\r\n    { type: NgZone }\r\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScriptService, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();\r\nif (false) {\r\n    /**\r\n     * Name of the global google recaptcha script\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.windowGrecaptcha;\r\n    /**\r\n     * Name of the global callback\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.windowOnLoadCallbackProperty;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.globalDomain;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.defaultDomain;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.zone;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/invisible-recaptcha.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass InvisibleReCaptchaComponent extends BaseReCaptchaComponent {\r\n    /**\r\n     * @param {?} renderer\r\n     * @param {?} zone\r\n     * @param {?} injector\r\n     * @param {?} scriptService\r\n     */\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        super(renderer, zone, injector, scriptService);\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * This size representing invisible captcha\r\n         */\r\n        this.size = 'invisible';\r\n        /**\r\n         * Theme\r\n         */\r\n        this.theme = 'light';\r\n        /**\r\n         * Badge\r\n         */\r\n        this.badge = 'bottomright';\r\n        this.recaptchaType = ReCaptchaType.InvisibleReCaptcha;\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n    /**\r\n     * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n     * @return {?}\r\n     */\r\n    execute() {\r\n        // execute captcha\r\n        this.zone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => this.reCaptchaApi.execute(this.captchaId)));\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    captchaSpecificSetup() {\r\n    }\r\n    /**\r\n     * Gets reCaptcha properties\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    getCaptchaProperties() {\r\n        return {\r\n            'sitekey': this.siteKey,\r\n            'callback': (/**\r\n             * @param {?} response\r\n             * @return {?}\r\n             */\r\n            (response) => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleCallback(response)))),\r\n            'expired-callback': (/**\r\n             * @return {?}\r\n             */\r\n            () => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleExpireCallback()))),\r\n            'error-callback': (/**\r\n             * @return {?}\r\n             */\r\n            () => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleErrorCallback()))),\r\n            'badge': this.badge,\r\n            'type': this.type,\r\n            'tabindex': this.tabIndex,\r\n            'size': this.size,\r\n            'theme': this.theme\r\n        };\r\n    }\r\n}\nInvisibleReCaptchaComponent.ɵfac = function InvisibleReCaptchaComponent_Factory(t) { return new (t || InvisibleReCaptchaComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ScriptService)); };\nInvisibleReCaptchaComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: InvisibleReCaptchaComponent, selectors: [[\"ngx-invisible-recaptcha\"]], viewQuery: function InvisibleReCaptchaComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.captchaWrapperElem = _t.first);\n    } }, inputs: { theme: \"theme\", badge: \"badge\", hl: \"hl\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(( /**\n                 * @return {?}\n                 */() => InvisibleReCaptchaComponent)),\n                multi: true\n            }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 0, consts: [[\"captchaWrapperElem\", \"\"]], template: function InvisibleReCaptchaComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", null, 0);\n    } }, encapsulation: 2 });\r\n/** @nocollapse */\r\nInvisibleReCaptchaComponent.ctorParameters = () => [\r\n    { type: Renderer2 },\r\n    { type: NgZone },\r\n    { type: Injector },\r\n    { type: ScriptService }\r\n];\r\nInvisibleReCaptchaComponent.propDecorators = {\r\n    theme: [{ type: Input }],\r\n    badge: [{ type: Input }],\r\n    hl: [{ type: Input }],\r\n    captchaWrapperElem: [{ type: ViewChild, args: ['captchaWrapperElem', { static: false },] }]\r\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InvisibleReCaptchaComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-invisible-recaptcha',\n                template: `\r\n  <div #captchaWrapperElem></div>`,\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(( /**\n                         * @return {?}\n                         */() => InvisibleReCaptchaComponent)),\n                        multi: true\n                    }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Injector }, { type: ScriptService }]; }, { theme: [{\n            type: Input\n        }], badge: [{\n            type: Input\n        }], hl: [{\n            type: Input\n        }], captchaWrapperElem: [{\n            type: ViewChild,\n            args: ['captchaWrapperElem', { static: false }]\n        }] }); })();\r\nif (false) {\r\n    /**\r\n     * This size representing invisible captcha\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.size;\r\n    /**\r\n     * Theme\r\n     * @type {?}\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.theme;\r\n    /**\r\n     * Badge\r\n     * @type {?}\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.badge;\r\n    /**\r\n     * Language code. Auto-detects the user's language if unspecified.\r\n     * @type {?}\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.hl;\r\n    /** @type {?} */\r\n    InvisibleReCaptchaComponent.prototype.captchaWrapperElem;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.recaptchaType;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.renderer;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.zone;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.injector;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    InvisibleReCaptchaComponent.prototype.scriptService;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/recaptcha-2.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass ReCaptcha2Component extends BaseReCaptchaComponent {\r\n    /**\r\n     * @param {?} renderer\r\n     * @param {?} zone\r\n     * @param {?} injector\r\n     * @param {?} scriptService\r\n     */\r\n    constructor(renderer, zone, injector, scriptService) {\r\n        super(renderer, zone, injector, scriptService);\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.injector = injector;\r\n        this.scriptService = scriptService;\r\n        /**\r\n         * Name of the global expire callback\r\n         */\r\n        this.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\r\n        /**\r\n         * Name of the global error callback\r\n         */\r\n        this.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\r\n        /**\r\n         * Theme\r\n         */\r\n        this.theme = 'light';\r\n        /**\r\n         * Size\r\n         */\r\n        this.size = 'normal';\r\n        this.recaptchaType = ReCaptchaType.ReCaptcha2;\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        super.ngOnChanges(changes);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        window[this.windowOnErrorCallbackProperty] = {};\r\n        window[this.windowOnExpireCallbackProperty] = {};\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    captchaSpecificSetup() {\r\n        this.registerCallbacks();\r\n    }\r\n    /**\r\n     * Gets reCaptcha properties\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    getCaptchaProperties() {\r\n        return {\r\n            'sitekey': this.siteKey,\r\n            'callback': (/**\r\n             * @param {?} response\r\n             * @return {?}\r\n             */\r\n            (response) => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleCallback(response)))),\r\n            'expired-callback': (/**\r\n             * @return {?}\r\n             */\r\n            () => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleExpireCallback()))),\r\n            'error-callback': (/**\r\n             * @return {?}\r\n             */\r\n            () => this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => this.handleErrorCallback()))),\r\n            'theme': this.theme,\r\n            'type': this.type,\r\n            'size': this.size,\r\n            'tabindex': this.tabIndex\r\n        };\r\n    }\r\n    /**\r\n     * Registers global callbacks\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    registerCallbacks() {\r\n        window[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\r\n        window[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\r\n    }\r\n}\nReCaptcha2Component.ɵfac = function ReCaptcha2Component_Factory(t) { return new (t || ReCaptcha2Component)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ScriptService)); };\nReCaptcha2Component.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ReCaptcha2Component, selectors: [[\"ngx-recaptcha2\"]], viewQuery: function ReCaptcha2Component_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.captchaWrapperElem = _t.first);\n    } }, inputs: { theme: \"theme\", size: \"size\", hl: \"hl\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(( /**\n                 * @return {?}\n                 */() => ReCaptcha2Component)),\n                multi: true\n            }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 0, consts: [[\"captchaWrapperElem\", \"\"]], template: function ReCaptcha2Component_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", null, 0);\n    } }, encapsulation: 2 });\r\n/** @nocollapse */\r\nReCaptcha2Component.ctorParameters = () => [\r\n    { type: Renderer2 },\r\n    { type: NgZone },\r\n    { type: Injector },\r\n    { type: ScriptService }\r\n];\r\nReCaptcha2Component.propDecorators = {\r\n    theme: [{ type: Input }],\r\n    size: [{ type: Input }],\r\n    hl: [{ type: Input }],\r\n    captchaWrapperElem: [{ type: ViewChild, args: ['captchaWrapperElem', { static: false },] }]\r\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReCaptcha2Component, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-recaptcha2',\n                template: `\r\n  <div #captchaWrapperElem></div>`,\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(( /**\n                         * @return {?}\n                         */() => ReCaptcha2Component)),\n                        multi: true\n                    }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Injector }, { type: ScriptService }]; }, { theme: [{\n            type: Input\n        }], size: [{\n            type: Input\n        }], hl: [{\n            type: Input\n        }], captchaWrapperElem: [{\n            type: ViewChild,\n            args: ['captchaWrapperElem', { static: false }]\n        }] }); })();\r\nif (false) {\r\n    /**\r\n     * Name of the global expire callback\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.windowOnErrorCallbackProperty;\r\n    /**\r\n     * Name of the global error callback\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.windowOnExpireCallbackProperty;\r\n    /**\r\n     * Theme\r\n     * @type {?}\r\n     */\r\n    ReCaptcha2Component.prototype.theme;\r\n    /**\r\n     * Size\r\n     * @type {?}\r\n     */\r\n    ReCaptcha2Component.prototype.size;\r\n    /**\r\n     * Language code. Auto-detects the user's language if unspecified.\r\n     * @type {?}\r\n     */\r\n    ReCaptcha2Component.prototype.hl;\r\n    /** @type {?} */\r\n    ReCaptcha2Component.prototype.captchaWrapperElem;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.recaptchaType;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.renderer;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.zone;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.injector;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptcha2Component.prototype.scriptService;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/services/recaptcha_v3.service.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass ReCaptchaV3Service {\r\n    /**\r\n     * @param {?} scriptService\r\n     * @param {?} zone\r\n     */\r\n    constructor(scriptService, zone) {\r\n        this.scriptService = scriptService;\r\n        this.zone = zone;\r\n    }\r\n    /**\r\n     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify\r\n     * this callback in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     *\r\n     * @param {?} siteKey Site key found in your google admin panel\r\n     * @param {?} action Action to log\r\n     * @param {?} callback\r\n     * @param {?=} config\r\n     * @return {?}\r\n     */\r\n    execute(siteKey, action, callback, config) {\r\n        this.executeAsPromise(siteKey, action, config).then(callback);\r\n    }\r\n    /**\r\n     * Executes reCaptcha v3 with given action and returns token via Promise. You need to verify\r\n     * this token in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     *\r\n     * @param {?} siteKey Site key found in your google admin panel\r\n     * @param {?} action Action to log\r\n     * @param {?=} config\r\n     * @return {?}\r\n     */\r\n    executeAsPromise(siteKey, action, config) {\r\n        return new Promise((/**\r\n         * @param {?} resolve\r\n         * @param {?} reject\r\n         * @return {?}\r\n         */\r\n        (resolve, reject) => {\r\n            /** @type {?} */\r\n            const useGlobalDomain = config && config.useGlobalDomain ? true : false;\r\n            /** @type {?} */\r\n            const onRegister = (/**\r\n             * @param {?} grecaptcha\r\n             * @return {?}\r\n             */\r\n            grecaptcha => {\r\n                this.zone.runOutsideAngular((/**\r\n                 * @return {?}\r\n                 */\r\n                () => {\r\n                    try {\r\n                        grecaptcha\r\n                            .execute(siteKey, { action })\r\n                            .then((/**\r\n                         * @param {?} token\r\n                         * @return {?}\r\n                         */\r\n                        token => this.zone.run((/**\r\n                         * @return {?}\r\n                         */\r\n                        () => resolve(token)))));\r\n                    }\r\n                    catch (error) {\r\n                        reject(error);\r\n                    }\r\n                }));\r\n            });\r\n            this.scriptService.registerCaptchaScript(useGlobalDomain, siteKey, onRegister);\r\n        }));\r\n    }\r\n}\nReCaptchaV3Service.ɵfac = function ReCaptchaV3Service_Factory(t) { return new (t || ReCaptchaV3Service)(ɵngcc0.ɵɵinject(ScriptService), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nReCaptchaV3Service.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ReCaptchaV3Service, factory: ReCaptchaV3Service.ɵfac });\r\n/** @nocollapse */\r\nReCaptchaV3Service.ctorParameters = () => [\r\n    { type: ScriptService },\r\n    { type: NgZone }\r\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReCaptchaV3Service, [{\n        type: Injectable\n    }], function () { return [{ type: ScriptService }, { type: ɵngcc0.NgZone }]; }, null); })();\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptchaV3Service.prototype.scriptService;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ReCaptchaV3Service.prototype.zone;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/ngx-captcha.module.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxCaptchaModule {\r\n}\nNgxCaptchaModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxCaptchaModule });\nNgxCaptchaModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxCaptchaModule_Factory(t) { return new (t || NgxCaptchaModule)(); }, providers: [\n        ScriptService,\n        ReCaptchaV3Service\n    ], imports: [[\n            CommonModule\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxCaptchaModule, { declarations: function () { return [ReCaptcha2Component,\n        InvisibleReCaptchaComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ReCaptcha2Component,\n        InvisibleReCaptchaComponent]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxCaptchaModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule\n                ],\n                declarations: [\n                    ReCaptcha2Component,\n                    InvisibleReCaptchaComponent\n                ],\n                providers: [\n                    ScriptService,\n                    ReCaptchaV3Service\n                ],\n                exports: [\n                    ReCaptcha2Component,\n                    InvisibleReCaptchaComponent\n                ]\n            }]\n    }], null, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/index.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: public_api.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: ngx-captcha.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { BaseReCaptchaComponent, InvisibleReCaptchaComponent, NgxCaptchaModule, ReCaptcha2Component, ReCaptchaType, ReCaptchaV3Service, ScriptService };\n\n//# sourceMappingURL=ngx-captcha.js.map"]}